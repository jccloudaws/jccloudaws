AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Stack taller lambda 04
Parameters:
  team:
    Description: name team
    Type: String
  environment:
    Description: name envoriment
    Type: String
  application:
    Description: name Application
    Type: String
  stack:
    Description: name Stack
    Type: String
  ShouldCreateBucket:
    Description: valor que indica si el bucket debe ser considerado para crealo
    Type: String
    Default: true
Globals:
  Function:
    Timeout: 5
    MemorySize: 512
Conditions:
  ShouldCreateBucket:
    Fn::Equals:
    - Ref: ShouldCreateBucket
    - 'true'
Resources:
  Function:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://rpa-cfn-artifacts-40888866-us-east-1/RPA-TALLER-LAMBDA-05/25880a17510ad97a060b2083caebe90a
      Handler: lambda_function.lambda_handler
      Runtime: python3.7
      FunctionName:
        Fn::Sub: ibk-${team}-${application}-${stack}-${environment}-lambda
      Description: Lambda taller01
      MemorySize: 128
      Timeout: 3
      Role:
        Fn::GetAtt:
        - rRoleLambdaExecution
        - Arn
  rRoleLambdaExecution:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ibk-${team}-${application}-${stack}-${environment}-execute-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName:
          Fn::Sub: ibk-${team}-${application}-${stack}-${environment}-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: LogGroupPolicy
            Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:CreateLogGroup
            - logs:PutLogEvents
            Resource: '*'
          - Sid: S3Policy
            Effect: Allow
            Action:
            - s3:GetObject
            Resource:
            - Fn::Sub: arn:aws:s3:::${team}-${application}-${stack}-${environment}-${AWS::Region}-${AWS::AccountId}-bucket
            - Fn::Sub: arn:aws:s3:::${team}-${application}-${stack}-${environment}-${AWS::Region}-${AWS::AccountId}-bucket/*
  BucketData:
    DependsOn: S3InvokeLambdaPermission
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: ${team}-${application}-${stack}-${environment}-${AWS::Region}-${AWS::AccountId}-bucket
      NotificationConfiguration:
        LambdaConfigurations:
        - Event: s3:ObjectCreated:*
          Function:
            Fn::GetAtt:
            - Function
            - Arn
          Filter:
            S3Key:
              Rules:
              - Name: prefix
                Value: data/
  S3InvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: Function
      Principal: s3.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:s3:::${team}-${application}-${stack}-${environment}-${AWS::Region}-${AWS::AccountId}-bucket
