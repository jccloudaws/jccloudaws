AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Stack taller lambda 04

Parameters:
  team:
    Description: "name team"
    Type: String
  environment:
    Description: "name envoriment"
    Type: String
  application:
    Description: "name Application"
    Type: String
  stack:
    Description: "name Stack"
    Type: String
  ShouldCreateBucket:
    Description: "valor que indica si el bucket debe ser considerado para crealo"
    Type: String
    Default: true


Globals:
  Function:
    Timeout: 5
    MemorySize: 512

Conditions:
  ShouldCreateBucket: !Equals [ !Ref ShouldCreateBucket, "true" ]
  
Resources:
  Function:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src
      Handler: lambda_function.lambda_handler
      Runtime: python3.7
      FunctionName:
        !Sub "${team}-${application}-${stack}-${environment}-lambda"
      Description: "Lambda taller01"
      MemorySize: 128
      Timeout: 3
      Role: !GetAtt rRoleLambdaExecution.Arn

  rRoleLambdaExecution:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "${team}-${application}-${stack}-${environment}-execute-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: !Sub "${team}-${application}-${stack}-${environment}-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: LogGroupPolicy
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                  - logs:PutLogEvents
                Resource: "*"
              - Sid: S3Policy
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource: 
                  - !Sub "arn:aws:s3:::${team}-${application}-${stack}-${environment}-${AWS::Region}-${AWS::AccountId}-bucket"
                  - !Sub "arn:aws:s3:::${team}-${application}-${stack}-${environment}-${AWS::Region}-${AWS::AccountId}-bucket/*"
                
  BucketData:
    DependsOn: S3InvokeLambdaPermission
    Type: AWS::S3::Bucket
    #DeletionPolicy: Retain
    #Condition: ShouldCreateBucket
    Properties:
      BucketName: !Sub "${team}-${application}-${stack}-${environment}-${AWS::Region}-${AWS::AccountId}-bucket"
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'
            Function: !GetAtt Function.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: 'data/'
                    
  S3InvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref Function
      Principal: s3.amazonaws.com
      SourceArn: !Sub "arn:aws:s3:::${team}-${application}-${stack}-${environment}-${AWS::Region}-${AWS::AccountId}-bucket"
      #!GetAtt BucketData.Arn
    
#Outputs:
#DependsOn:
#  lambda:
#    Value: !GetAtt Function.Arn