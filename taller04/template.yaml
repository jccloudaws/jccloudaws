AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Stack taller lambda 04

Parameters:
  team:
    Description: "name team"
    Type: String
  environment:
    Description: "name envoriment"
    Type: String
  application:
    Description: "name Application"
    Type: String
  stack:
    Description: "name Stack"
    Type: String
  bucket:
    Description: "name bucket"
    Type: String    
  
Resources:
  Function:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src
      Handler: lambda_function.lambda_handler
      Runtime: python3.7
      FunctionName:
        !Sub "${team}-${application}-${stack}-${environment}-lambda"
      Description: "Lambda taller01"
      MemorySize: 128
      Timeout: 3
      Role: !GetAtt rRoleLambdaExecution.Arn

  rRoleLambdaExecution:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "${team}-${application}-${stack}-${environment}-execute-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: !Sub "${team}-${application}-${stack}-${environment}-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: LogGroupPolicy
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                  - logs:PutLogEvents
                Resource: "*"
                #!GetAtt FunctionLogGroup.Arn
                  
  Rule:
    Type: "AWS::Events::Rule"
    Properties:
      Name: !Join [ '-', [!Ref team, !Ref stack, !Ref application,"cron","rule"]]
      Description: Trigger Lambda every minute
      State: ENABLED
      ScheduleExpression: "cron(*/1 * * * ? *)"
      Targets:
        - Id: !Join [ '-', [ "ibk", !Ref team, !Ref stack, !Ref application,"cron","rule"]]
          Arn: !GetAtt Function.Arn
          Input: !Sub |
            {                            
              "env": "${environment}"
            }
  PermissionEventsInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref Function
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt Rule.Arn

#Outputs:
#DependsOn:
#  lambda:
#    Value: !GetAtt Function.Arn